interface ContainerInfo {
    name: string;
    isRunning: boolean;
}
export declare const composeStatus: (dockerComposePath: string, projectDir?: string) => Promise<ContainerInfo[]>;
export declare const composeLogs: (dockerComposePath: string, projectDir?: string, totalLines?: number) => Promise<string[]>;
export declare const compose: {
    build: (dockerComposePath: string, projectDir?: string, additionalArgs?: string[]) => Promise<string>;
    create: (dockerComposePath: string, projectDir?: string, additionalArgs?: string[]) => Promise<string>;
    up: (dockerComposePath: string, projectDir?: string, additionalArgs?: string[]) => Promise<string>;
    stop: (dockerComposePath: string, projectDir?: string, additionalArgs?: string[]) => Promise<string>;
    down: (dockerComposePath: string, projectDir?: string, additionalArgs?: string[]) => Promise<string>;
    logs: (dockerComposePath: string, projectDir?: string, totalLines?: number) => Promise<string[]>;
    status: (dockerComposePath: string, projectDir?: string) => Promise<ContainerInfo[]>;
};
export {};
