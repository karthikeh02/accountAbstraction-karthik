import { Module } from "zksync-cli/lib";
import type { ConfigHandler, NodeInfo } from "zksync-cli/lib";
type ModuleConfig = {
    version?: string;
    nodeType?: "memory" | "docker";
};
export default class SetupModule extends Module<ModuleConfig> {
    constructor(config: ConfigHandler);
    composeFile: string;
    inMemoryNode: {
        id: number;
        rpcUrl: string;
    };
    dockerizedNode: {
        id: number;
        rpcUrl: string;
        l1Chain: {
            id: number;
            rpcUrl: string;
        };
    };
    isNodeSupported(nodeInfo: NodeInfo): Promise<boolean>;
    /**
     * Retrieves the type of node being used based on the L1 node presence.
     *
     * Assumptions:
     * - If an L1 node is detected, we assume the user is utilizing the default dockerized testing node.
     * - If no L1 node is found, it's assumed the user is using the default in-memory node.
     *
     * This approach allows for the downloading of prebuilt distributions for the identified node type,
     * as building from scratch can be time-consuming.
     *
     * Limitation:
     * This method does not account for custom RPC URLs. This limitation should be addressed in future
     * iterations of this module.
     */
    getNodeType(): Promise<ModuleConfig["nodeType"]>;
    isInstalled(): Promise<boolean>;
    install(): Promise<void>;
    isRunning(): Promise<boolean>;
    start(): Promise<void>;
    getStartupInfo(): Promise<string[]>;
    getLogs(): Promise<string[]>;
    get version(): string | undefined;
    getLatestVersion(): Promise<string>;
    update(): Promise<void>;
    stop(): Promise<void>;
    clean(): Promise<void>;
}
export {};
